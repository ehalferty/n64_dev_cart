;buildInfoPackage: chisel3, version: 3.3-SNAPSHOT, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit N64DevCartMain : 
  module N64DevCartMain : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip n64adi : UInt<16>, flip n64readn : UInt<1>, flip n64alel : UInt<1>, flip n64aleh : UInt<1>, n64ado : UInt<16>}
    
    cmem _T : UInt<16>[262144] @[N64DevCartMain.scala 31:25]
    reg _T_1 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[N64DevCartMain.scala 33:27]
    node _T_2 = eq(io.n64aleh, UInt<1>("h00")) @[N64DevCartMain.scala 34:15]
    node _T_3 = eq(io.n64aleh, UInt<1>("h00")) @[N64DevCartMain.scala 34:39]
    reg _T_4 : UInt<1>, clock @[N64DevCartMain.scala 34:38]
    _T_4 <= _T_3 @[N64DevCartMain.scala 34:38]
    node _T_5 = eq(_T_4, UInt<1>("h00")) @[N64DevCartMain.scala 34:30]
    node _T_6 = and(_T_2, _T_5) @[N64DevCartMain.scala 34:27]
    when _T_6 : @[N64DevCartMain.scala 34:53]
      node _T_7 = and(_T_1, UInt<16>("h0ffff")) @[N64DevCartMain.scala 35:27]
      node _T_8 = and(io.n64adi, UInt<16>("h0ffff")) @[N64DevCartMain.scala 35:54]
      node _T_9 = shl(_T_8, 16) @[N64DevCartMain.scala 35:67]
      node _T_10 = or(_T_7, _T_9) @[N64DevCartMain.scala 35:40]
      _T_1 <= _T_10 @[N64DevCartMain.scala 35:18]
      skip @[N64DevCartMain.scala 34:53]
    else : @[N64DevCartMain.scala 36:59]
      node _T_11 = eq(io.n64alel, UInt<1>("h00")) @[N64DevCartMain.scala 36:21]
      node _T_12 = eq(io.n64alel, UInt<1>("h00")) @[N64DevCartMain.scala 36:45]
      reg _T_13 : UInt<1>, clock @[N64DevCartMain.scala 36:44]
      _T_13 <= _T_12 @[N64DevCartMain.scala 36:44]
      node _T_14 = eq(_T_13, UInt<1>("h00")) @[N64DevCartMain.scala 36:36]
      node _T_15 = and(_T_11, _T_14) @[N64DevCartMain.scala 36:33]
      when _T_15 : @[N64DevCartMain.scala 36:59]
        node _T_16 = and(_T_1, UInt<32>("h0ffff0000")) @[N64DevCartMain.scala 37:27]
        node _T_17 = and(io.n64adi, UInt<16>("h0ffff")) @[N64DevCartMain.scala 37:57]
        node _T_18 = or(_T_16, _T_17) @[N64DevCartMain.scala 37:44]
        _T_1 <= _T_18 @[N64DevCartMain.scala 37:18]
        skip @[N64DevCartMain.scala 36:59]
      else : @[N64DevCartMain.scala 38:59]
        node _T_19 = eq(io.n64readn, UInt<1>("h00")) @[N64DevCartMain.scala 38:44]
        reg _T_20 : UInt<1>, clock @[N64DevCartMain.scala 38:43]
        _T_20 <= _T_19 @[N64DevCartMain.scala 38:43]
        node _T_21 = and(io.n64readn, _T_20) @[N64DevCartMain.scala 38:33]
        when _T_21 : @[N64DevCartMain.scala 38:59]
          node _T_22 = add(_T_1, UInt<2>("h02")) @[N64DevCartMain.scala 39:26]
          node _T_23 = tail(_T_22, 1) @[N64DevCartMain.scala 39:26]
          _T_1 <= _T_23 @[N64DevCartMain.scala 39:18]
          skip @[N64DevCartMain.scala 38:59]
    node _T_24 = shr(_T_1, 1) @[N64DevCartMain.scala 41:34]
    node _T_25 = bits(_T_24, 17, 0) @[N64DevCartMain.scala 41:28]
    infer mport _T_26 = _T[_T_25], clock @[N64DevCartMain.scala 41:28]
    io.n64ado <= _T_26 @[N64DevCartMain.scala 41:19]
    
